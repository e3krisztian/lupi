# coding: utf-8

"""
    Lupi Game API

    # Least Unique Positive Integer (Lupi)  Lupi is a fun game, that has been studied a lot and has some maths behind how people behave and what really is optimal in some respect.  ## The Rules of the Game  - Lupi is a multiplayer game - each player picks a positive integer - the lowest unique integer wins   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from lupi_game_client.configuration import Configuration


class RoundResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_completed': 'bool',
        'winner': 'str',
        'vote': 'int'
    }

    attribute_map = {
        'is_completed': 'is_completed',
        'winner': 'winner',
        'vote': 'vote'
    }

    def __init__(self, is_completed=None, winner=None, vote=None, local_vars_configuration=None):  # noqa: E501
        """RoundResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_completed = None
        self._winner = None
        self._vote = None
        self.discriminator = None

        self.is_completed = is_completed
        if winner is not None:
            self.winner = winner
        if vote is not None:
            self.vote = vote

    @property
    def is_completed(self):
        """Gets the is_completed of this RoundResult.  # noqa: E501


        :return: The is_completed of this RoundResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this RoundResult.


        :param is_completed: The is_completed of this RoundResult.  # noqa: E501
        :type is_completed: bool
        """
        if self.local_vars_configuration.client_side_validation and is_completed is None:  # noqa: E501
            raise ValueError("Invalid value for `is_completed`, must not be `None`")  # noqa: E501

        self._is_completed = is_completed

    @property
    def winner(self):
        """Gets the winner of this RoundResult.  # noqa: E501


        :return: The winner of this RoundResult.  # noqa: E501
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this RoundResult.


        :param winner: The winner of this RoundResult.  # noqa: E501
        :type winner: str
        """

        self._winner = winner

    @property
    def vote(self):
        """Gets the vote of this RoundResult.  # noqa: E501


        :return: The vote of this RoundResult.  # noqa: E501
        :rtype: int
        """
        return self._vote

    @vote.setter
    def vote(self, vote):
        """Sets the vote of this RoundResult.


        :param vote: The vote of this RoundResult.  # noqa: E501
        :type vote: int
        """
        if (self.local_vars_configuration.client_side_validation and
                vote is not None and vote < 1):  # noqa: E501
            raise ValueError("Invalid value for `vote`, must be a value greater than or equal to `1`")  # noqa: E501

        self._vote = vote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoundResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoundResult):
            return True

        return self.to_dict() != other.to_dict()
